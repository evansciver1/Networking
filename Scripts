Stream.py
#!/usr/bin/python3
  2 import socket
  3 
  4 # This can also be accomplished by using s = socket.socket() due to AF INET     and SOCK_STREAM being default
  5 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  6 
  7 ipaddr = '127.0.0.1'
  8 port = 54321
  9 
 10 s.connect((ipaddr, port))
 11 
 12 # To send a string as a bytes-like object, add the prefix b to the string \n     is used to to go to the next line
 13 s.send(b'Hello\n')
 14 
 15 #It is recommended that the buffersize used with the recvfrom is a power of     2 and not a very large number of bits
 16 response, conn = s.recvfrom(1024)
 17 
 18 #In order to recieve a message that is sent as a bytes-like object, you must     decode into utf-8 (default)
 19 print(response.decode())
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 1 #!/usr/bin/python3
  2 import socket
  3 
  4 s = socket.socket(socket.AF_INET, socket. SOCK_DGRAM)
  5 
  6 ipaddr='127.0.0.1'
  7 port=54321
  8 
  9 #To send a string as a bytes-like object add the prefix b to the string
 10 s.sendto(b'Hello\n', (ipaddr, port))
 11 
 12 #It is recommended that the buffersize used with recvfrom is a power of 2 an    d not a very large number because of the large number of bits
 13 response, conn = s.recvfrom(1024)
 14 
 15 #In order to recieve a message that is sent as a bytes like object you must     decode it into uft-8
 16 print(response.decode())
----------------------------------------------------------------------------------------------------------------------------------------------------------------
#!/usr/bin/python3
  2 
  3 #Building the socket
  4 import socket
  5 
  6 #System level commands
  7 import sys
  8 
  9 #For establishing the packet structure. This will allow direct access to methods and functions in the struct module
 10 from struct import *
 11 
 12 #Create a raw socket
 13 try:
 14     s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
 15 except socket.error as msg:
 16        print(msg)
 17        sys.exit()
 18 
 19 packet = ''
 20 
 21 src_ip = "10.1.0.1"
 22 dst_ip = "10.3.0.2"
 23 
 24 #Lets add the ipv4 header info
 25 
 26 ip_ver_ihl = 69 #This is putting the decimal conversion of 0x45 for Version and Internet Header Length
 27 ip_tos = 0 #This combines the DSXCP and ECN fields
 28 ip_len = 0 #The kernel will fill in the actual length of the packet
 29 ip_id = 12345 #This sets the IP identity identification for the post
 30 ip_frag = 0 #Sets fragmentation to off
 31 ip_ttl = 64 #Sets ttl of the packet
 32 ip_proto = 16 #Sets IP protocol to 16
 33 ip_check = 0 #Kernel fills in the checksum for the packet
 34 ip_srcadd = socket.inet_aton(src_ip) # Inet_anton will convert an IP addre to a 32 bit number
 35 ip_dstadd = socket.inet_aton(dst_ip) # Inet_anton will convert an IP to a 32 bit number
 36 
 37 ip_header = pack('!BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)
 38 
 39 message = b'Lee'
 40 packet = ip_header + message
 41 
 42 # Send the packet
 43 s.sendto(packet, (dst_ip, 0))

