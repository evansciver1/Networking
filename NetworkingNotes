----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 1
----------------------------------------------------------------------------------------------------------------------------------------------------------
- 'eog [file]' will open an image from linux to your screen
  - Network Fundamentals:
    - Byte = 8 bits
    - Half Word = 16 bits
    - Word = 32 bits
    - Base 2 = binary
    - Base 10 = normal numbers
    - Base 16 = hex
    - Base 64 = binary to ascii conversion
    - Message Formatting Encapsulation and Decapsulation - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/PDU_SDU.png
    - OSI Model Diagram - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/OSI.png
    - IETF.org/standards - has technical memos on everything dealing with every 802.11 ammendment
      - Physical Layer/OSI Layer 1:
        -hardware specs, encoding and signaling, data transmission and reception, physical network design
      - Data Link Layer/OSI Layer 2:
        - Switching happens here; Ethernet, ARP, and 802.1Q headers
        - Sub Layers - MAC (Media Access Control), LLC (Logical Link Control)
      - Network Layer/OSI Layer 3:
        - Fragmentation Process - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/Fragmentation.png
        - Fragmentation bits - RES (reserved - evil bit, always 0), DF (don't fragment - off if a packet is fragmented),
          MF (more to follow - on if fragmented unless it's the last packet of a fragment), 
          Offset (helps recieving machine to arrange packets in order when they arrive)
        - Calculating Fragmentation Offset - Formula: (MTU - (IHL x 4)) / 8 = offset
        - Fingerprinting - devices can be identified based on TTL and TCP Window Size; but these are not definitive
          - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/Default_TTL.png
        - Zero Configuration
          - IPv4 Auto-Configuration used APIPA and RFC 3927
          - IPv6 uses SLAAC and RFC 4862
----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 2
----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Network Fundamentals (cont.):
    - Transport Layer/OSI Layer 4:
      - TCP and UDP 
    - Session Layer/OSI Layer 5:
      - Protocols: Socks, NetBIOS, PPTP/L2TP, RPC
      - SMB/CIFS: SMB rides over NetBIOS; SAMBA and CIFS are just flavors of SMB
      - RPC: any port, request/response protocol
    - Presentation Layer/OSI Layer 6:
      - Responsible for translation, formating, encoding, encryption, and compression
    - Application Layer/OSI Layer 7:
      - FTP: active and passive mode
        - FTP Active Issues:
          - NAT and Firewall traversal issues
          - Complications with tunneling through SSH
          - Passive FTP solves issues related to active mode is is most often used in modern systems
      - SSH
        - SSH Messages Provide:
          - Client/server authentication
          - Asymmetric or PKI for key exchange
          - Symmetric for session
          - User authentication
          - Data stream channeling
        - SSH Architecture:
          - Server, Client, Session, Keys, Key Generator
            - SSH Keys:
              - User - asymmetric public key used to identify the user to the server
              - Host - asymmetric public key used to identify the server to the user
              - Session - symmetric key created by the client and server to protect the session's communication
      - HTTP(S):
        - Methods are GET/HEAD/POST/PUT
        - Status Codes are 100, 200, 300, 400
  - Network Traffic Sniffing:
    - Capture Library:
      - Traffic Capture is possible because of Libpcap, WinPcap, NPCAP
    - TCPDump Demo:
      - sudo tcpdump [filter] 
      - -I specifies an interface
      - -D shows interfaces
      - -r reads from a file
      - -X shows hex and ascii
      - -XX adds additional header info
      - -v adds verbosity
      - -w writes to a file
      - filters are generally in normal language i.e. sudo tcpdump 'tcp port 80' -r [file] only shows packets on port 80
      - -n changes protocol names to port numbers
  - Berkeley Packet Filters (BPF):
    - Requests a SOCK_RAW socket and setsockopt calls SO_ATTACH_FILTER
    - sock = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL))
      ...
      setsockopt(sock, SOL_SOCKET, SO_ATTACH_FILTER, ...)
    - Using BPFs with operators, bitmasking, and TCPDump creates a powerful tool for traffic filtering and parsing
    -  tcpdump {A} [B:C] {D} {E} {F} {G}
      - A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
      - B = Header Byte offset
      - C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
      - D = optional: Bitwise mask (&)
      - E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
      - F = Result of Expresion
      - G = optional: Logical Operator (&& ||) to bridge expressions
      - Example: tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 &&
    - Bitwise Masking - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/ver-ihl-bpf.png:
      - Filter down to bits an not just the byte; ex: ip[0] & 0x0F > 0x05 = looks at the PSH  RST SYN AND FIN bits to see if they're total greater than 5
      - Most Exclusive - All designated bit values must be set; no others can be set (tcp[13] = 0x11 or tcp[13] & 0xFF = 0x11)
      - Less Exclusive - All designated bits must be set; all others may be set (tcp[13] & 0x11 = 0x11 - ack and fin have to be on; all others can be whatever)
      - Least Exclusive - At least one of the designated bits must be set to not equal 0; all others may be set (tcp[13] & 0x11 !=0)
  - Layer 2 Switching Technologies: 
    - VLANS and IEEE 802.1Q - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/802.1QFrame.png
    - IEEE 802.1AD "Q-in-Q" - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/802.1adFrame.jpg and 
      https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/doubletags.png
  - Layer 3 Switching Technologies
    - Routing Tables - yeah
----------------------------------------------------------------------------------------------------------------------------------------------------------    
Day 3
----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Packet Creation and Socket Programming:
    - Socket Types:
      - Stream Sockets - Connection oriented and sequenced; methods for connection establishment and tear-down. Used with TCP, SCTP, and Bluetooth
      - Datagram Sockets - Connectionless; designed for quickly sending and receiving data. Used with UDP.
      - Raw Sockets - Direct sending and receiving of IP packets without automatic protocol-specific formatting.
    - User vs. Kernel Space Sockets:
      - User Space:
        - Stream, Datagram
      - Kernel:
        - Raw
    - Socket Creation and Privilege Level:
      - User Space Sockets: the most common sockets that do not require elevated privileges to perform actions on behalf of user applications.
      - Kernel Space Sockets: Attempts to access hardware directly on behalf of a user application to either prevent encapsulation/decapsulation 
        or to create packets from scratch, which requires elevated privileges.
    - Network Programming with Python3:
      - Network sockets primarily use the Python3 socket and socket.socket function
      - import socket s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
    - Raw IPV4 Sockets:
      - Raw Socket scripts must include the IP header and the next headers.
      - Requires guidance from the "Request for Comments" (RFC)to follow header structure properly.
      - Raw Socket Use Case:
      	- Testing specific defense mechanisms 
	- Avoiding defense mechanisms
	- Obfuscating data during transfer
	- Manually crafting a packet with the chosen data in header field
    - Encoding and Decoding:
    	- Taking bits and coverting them to a specific cypher
	- Common Schemes: UTF-8, Base64, Hex
----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 4
----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Network Reconnaissance
    - Passive:
      	- Gathering info about targets w/o direct interaction:
	  - Requires more time than active recon, but has lower risk of discovery
		- Identify IP addrs. and Sub-Domains, External and 3rd party sites, people and technologies, content of interest, vulnerabilities
		- Tools include WhoIs queries, job site listings, phone numbers, google searches, passive OS fingerprinting
		- External Network Reconnaissance:
	  	  - DNS: resolves hostnames to IPs, RFC 3912, WHOIS queries
		  - Dig: typically between primary and secondary DNS servers, if allowed to transfer externally hostnames, IPs, and IP blocks can be determined
		  	- dig axfr @[server1] [server2]: performs a zone transfer and shows records from the first zone
			- dig [box name] MX/SOA/TXT: shows records for these specific types of info stored as DNS info
		  - Host History: wayback machine, netcraft
		  - Google searches: subdomains, technologies
		  - Shodan: reveals info about technologies, remote access services, improperly configured services, and net infrastructure
		- Network Scanning:
		  - Strategy:
		  	- Remote to Local
			- Local to Remote
			- Local to Local
			- Remote to Remote
		  - Approach:
		  	- Aim: wide range target scan, target specific scan
			- Method: single source scan, distributed scan
	      - Types:
		  	- Broadcast ping and ping sweep
			- ARP scan
			- SYN scan
			- Full connect scan
			- Null scan
			- FIN scan
			- XMAS tree scan
			- UDP scan
			- ACK/Window scan
			- RPC scan
			- FTP scan
			- Decoy scan
			- OS fingerprinting scan
			- Version scan
			- Protocol ping
			- Discovery probes
		  - Network Scanning - Code
		  	- nmap [Options] [Target IP/ Subnet]
		      - Nmap by default sends out ping packets; if pings are being blocked on the network nmap will not work
			  - https://nmap.org/book/man.html <- nmap guide book from nmap.org
			- nc [Options] [Target IP] [Target Port]
			  - nc does not support cidr notation, while nmap does; nc also requires a specific port to go to, while nmap does not
			  - https://linux.die.net/man/1/nc <- nc syntax guide
		  - Network Mapping - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/offensivefinishednetwork.png
----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 5
----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Data Transfer, Movement, and Redirection:
    - Common Protocols:
    	- TFTP
	  - UDP transport
	  - RFC 1350 Rev2
	  - Extremely small and simple communication
	  - No terminal communication
	  - Insecure
	  - No directory services
	  - Used often for technologies such as BOOTP and PXE
	- FTP (active and passive)
	  - TCP transport
	  - RFC 959
	  - Uses multiple TCP connections
	  - Control - port 21 / Data - port 20
	  - Authentication through clear-text sign in
	  - Insecure in default config
	  - Has directory services
	  - Can be enhanced with SSL/TLS
	  - Anonymous login
	- SFTP
	  - TCP transport (TCP port 22)
    	  - Uses symmetric and asymmetric encryption
    	  - Adds FTP like services to SSH
    	  - Authentication through sign in (username and password) or with SSH key
          - Interactive terminal access
	- FTPS
	  - TCP transport (TCP port 443)
    	  - Adds SSL/TLS encryption to FTP
    	  - Authentication with username/password and/or PKI
    	  - Interactive terminal access	
	- SCP
	  - TCP Transport (TCP port 22)
    	  - Uses symmetric and asymmetric encryption
    	  - Authentication through sign in (username and password) or with SSH key
    	  - Non Interactive
	  - Downloading a file from a remote directory to a local directory: scp student@172.16.82.106:secretstuff.txt /home/student
	  - Upload a file to a remote directory from a local directory: scp secretstuff.txt student@172.16.82.106:/home/student
	  - Copy a file from a remote host to a seperate remote host: scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student	
	  - Download a file from a remote directory to a local directory: scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student
	  - Upload a file to a remote directory from a local directory: scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student
	  - Download a file from a remote directory to a local directory: scp -P 1111 student@localhost:secretstuff.txt /home/student
	  - Upload a file to a remote directory from a local directory: scp -P 1111 secretstuff.txt student@localhost:/home/student
  - Traffic Redirection Using Tools:
    - NETCAT:
	- Netcat can be used for:
	  - inbound and outbound connections, TCP/UDP, to or from any ports
	  - Troubleshooting network connections
	  - Sending/Receiving data (insecurely)
	  - Port scanning
	  - Client to Listener file transfer:
	    - Client (sends file): nc 10.2.0.2 9001 < file.txt
	    - Listener (receive file): nc -l -p 9001 > newfile.txt
	  - Listener to Client file transfer:
	    - Listener (sends file): nc -l -p 9001 < file.txt
	    - Client (receive file): nc 10.2.0.2 9001 > newfile.txt
	  - Netcat relay demos:
	    - Client relay:
	      - mknod mypipe p
		nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe
	    - On Listener2 (sends info):
	      - nc -l -p 9002 < infile.txt
	    - On Listener1 (recieves info):
	      - nc -l -p 9001 > outfile.txt
	    - File Transfer with /Dev/TCP - useful for host that doesn't have NETCAT available:
	      - On the receiving box:
	      	- nc -l -p 1111 > file.txt
	      - On the sending box:
	      	- cat file.txt > /dev/tcp/10.2.0.2/1111
----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 6 (covered on Day 5)
----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Network Tunneling
    - for i in {1..254} ;do (ping -c 1 192.168.1.$i 2>/dev/null | grep "bytes from" &) ;done
    - nmap -Pn 192.168.0.1,5,25 -p 21-23,80 -T4 | egrep -i "open|scan report"
    - SSH:
      - Used for tunneling
      - SSH Port Forwarding:
      	- Creates channels using SSH-CONN protocol
	- Allows for tunneling of other services through SSh
	- Local Port Fowarding looks like:
	  - ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT (-p specifies a port number, 22 is the default)
	    - or -
	  - ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT (-L creates a local port bind, establishing the bind on the local machine)
	  - Example: 	
	    - ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT - sets port 1111 tunnel to lead to port 22
	    - ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT - sends traffic through port 1111 to go through port 2222 to go to 80
	    - firefox localhost:2222 - uses firefox through port 2222 to go to port 80 (http) which then goes to ssh on port 22
	- Dynamic Port Forwarding:
	  - Syntax - ssh -D <port> -p <alt port> <user>@<pivot ip> -NT
	  - Proxychains default port is 9050
	  - Creates a dynamic socks4 proxy that interacts alone, or with a previously established remote or local port forward
	  - Allows the use of scripts and other userspace programs 
	 - Localhost:
	  - Localhost on a -L is who you're going to; on a -R it's the box you ran the command from
----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 7
----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Network Analysis
    - Fingerprinting and Host Identification:
      - Variances in the RFC implementation for different OS’s and systems enables the capability for fingerprinting
      - Tools used for fingerprinting and host identification can be used passively(sniffing/fingerprinting) or actively(scanning)
      - POF (Passive OS Fingerprinting):
      	- Looks at variations in initial TTL, fragmentation flag, default IP header packet length, window size, and TCP options
	- Config stored in /etc/p0f/p0f.fp
	- sudo p0f - runs p0f
    - Traffic Sniffing:
      - Libpcap
      - WinPcap
      - NPCAP
    - TCPDump:
      - Case sensitive
      - sudo tcpdump -r [Name].pcap -nn 'icmp' | wc -l 
    - Indicators of Compromise:
      - .exe/executable files
      - NOP sled
      - Repeated letters
      - Well known signatures
      - Mismatched protocols
      - Unusual traffic
      - Large amounts of traffic at unusual times
----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 8
----------------------------------------------------------------------------------------------------------------------------------------------------------
  - Network Traffic Filtering
    - Filtering Devices and Mechanisms:
      - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T1_Filtering_Devices_Mechanisms&Layer.jpg
    - Filtering Concepts:
      - Stateless (Packet) Filtering (L3+4)
      - Stateful Inspection (L4)
      - Application Layer (L7)
    - Host Based Filtering
      - Windows - Windows Defender
      - Linux - Iptables
      	- Mangle Table - Linux Mangle Table can change a packets TTL to look like another OS
      - Netfilter Hooks
        - NF_IP_PRE_ROUTING → PREROUTING
	- NF_IP_LOCAL_IN → INPUT
	- NF_IP_FORWARD → FORWARD
	- NF_IP_LOCAL_OUT → OUTPUT
	- NF_IP_POST_ROUTING → POSTROUTING
      - Netfilter Paradigm
      	- tables - contain chains
	- chains - contain rules
	- rules - dictate what to match and what actions to perform on packets when packets match a rule
    - Configuring Iptables - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/IPtables.png
      - iptables - IPv4 packet administration
      - ip6tables - IPv6 packet administration
      - ebtables - Ethernet Bridge frame table administration
      - arptablels - Arp packet administration
      - Common Iptables Options - https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T51_iptables_options.png
      - Syntax - iptables -t [table] -A [chain] [rules] -j [action]
      - Flush Table - iptables -t [table] -F !Before flushing make sure you set your default policy back to accept!
      - Change default policy - iptables -t [table] -P [chain] [action]
      - Lists rules with rule numbers - iptables -t [table] -L --line-numbers
      - Lists rules as commands interpreted by the system - iptables -t [table] -S
      - Inserts rule before rule number - iptables -t [table] -I [chain] [rule num] [rules] -j [action]
      - Deletes rule at rule number - iptables -t [table] -D [chain] [rule num]
      - -m MULTIPORT lets you set multiple ports to be accepted i.e. -m multiport 6011,6012,6013
    - Nftable Families
      - ip - IPv4 packets
      - ip6 - IPv6 packets
      - inet - IPv4 and IPv6 packets
      - arp - layer 2
      - bridge - processing traffic/packets traversing bridges.
      - netdev - allows for user classification of packets - nftables passes up to the networking stack (no counterpart in iptables)
      - Chain-Types:
      	- filter - to filter packets - can be used with arp, bridge, ip, ip6, and inet families
	- route - to reroute packets - can be used with ip and ipv6 families only
	- nat - used for Network Address Translation - used with ip and ip6 table families only
	- https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T81_Fam_Chain_Hook.png
      - Creating Nftables:
      	Step 1: Create the Table:
	 - nft add table [family] [table]
	 - [family] = ip, ip6, inet, arp, bridge and netdev.
	 - [table] = user provided name for the table.
      	Step 2: Create the Base Chain:
	 - nft add chain [family] [table] [chain] { type [type] hook [hook] priority [priority] \; policy [policy] \;}
	 - [chain] = User defined name for the chain.
	 - [type] =  can be filter, route or nat.
 	 - [hook] = prerouting, ingress, input, forward, output or postrouting.
	 - [priority] = user provided integer. Lower number = higher priority. default = 0. Use "--" before negative numbers.
	 - ; [policy] ; = set policy for the chain. Can be accept (default) or drop.
	 - Use "\" to escape the ";" in bash
	Step 3: Create a Rule in the Chain:
	 - nft add rule [family] [table] [chain] [matches (matches)] [statement]
	 - [matches] = typically protocol headers(i.e. ip, ip6, tcp, udp, icmp, ether, etc)
	 - (matches) = these are specific to the [matches] field.
	 - [statement] = action performed when packet is matched. Some examples are: log, accept, drop, reject, counter, nat (dnat, snat, masquerade)
----------------------------------------------------------------------------------------------------------------------------------------------------------
Day 9
----------------------------------------------------------------------------------------------------------------------------------------------------------
  - IDS and Prevention Systems:
    - Snort - [action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;):
    - cat /var/log/snort/alert - log file
    - /etc/snort/rules - rules file
      - Action - such as alert, log, pass, drop, reject
      - Protocol - includes TCP, UDP, ICMP and others
      - Source IP address - single address, CIDR notation, range, or any
      - Source Port - one, multiple, any, or range of ports
      - Direction - either inbound or in and outbound
      - Destination IP address - options mirror Source IP
      - Destination port - options mirror Source port
      - General Rule Options:
        - msg - specifies the human-readable alert message
	- reference - links to external source of the rule
	- sid - used to uniquely identify Snort rules
	- rev - uniquely identify revisions of Snort rules
	- Classtype - used to describe what a successful attack would do
	- priority - level of concern (1 - really bad, 2 - badish, 3 - informational)
	- metadata - allows a rule writer to embed additional information about the rule
      - Detection Options:
        - content - looks for a string of text.
	- |binary data| - to look for a string of binary HEX
	- nocase - modified content, makes it case insensitive
	- depth - specify how many bytes into a packet Snort should search for the specified pattern
	- distance - how far into a packet Snort should ignore before starting to search for the specified pattern relative to the end of the previous pattern match
	- within - modifier that makes sure that at most N bytes are between pattern matches using the content keyword
	- offset - skips a certain number of bytes before searching (i.e. offset: 12)
      - Non-Payload Detection Options:
      	- Flow - direction (to/from client and server) and state of connection (established, stateless, stream/no stream)
	- ttl - The ttl keyword is used to check the IP time-to-live value.
	- tos - The tos keyword is used to check the IP TOS field for a specific value.
	- ipopts - The ipopts keyword is used to check if a specific IP option is present
	- seq - check for a specific TCP sequence number
	- ack - check for a specific TCP acknowledge number.
	- flags - The flags keyword is used to check if specific TCP flag bits are present.
	- itype - The itype keyword is used to check for a specific ICMP type value.
      - Post-Detection Options:
      	- logto - The logto keyword tells Snort to log all packets that trigger this rule to a special output log file.
	- session - The session keyword is built to extract user data from TCP Sessions.
	- react - This keyword implements an ability for users to react to traffic that matches a Snort rule by closing connection and sending a notice.
	- tag - The tag keyword allow rules to log more than just the single packet that triggered the rule.
	- activates - This keyword allows the rule writer to specify a rule to add when a specific network event occurs.
	- activated_by - This keyword allows the rule writer to dynamically enable a rule when a specific activate rule is triggered.
	- count - Allows the rule writer to specify how many packets to leave the rule enabled for after it is activated.
      - Thresholding Options:
      	- type [limit | threshold | both]
	- limit alerts on the 1st event during defined period then ignores the rest.
	- Threshold alerts every [x] times during defined period.
	- Both alerts once per time internal after seeing [x] amount of occurrences of event. It then ignores all other events during period.
	- track [by_src | by_dst] - rate is tracked either by source IP address, or destination IP address
	- count [#] - number of rule matching in [s] seconds that will cause event_filter limit to be exceeded
	- seconds [seconds] - time period over which count is accrued. [s] must be nonzero value
    - Attacking & Evading IDS/IPS:
      - Insertion Attack:
        - IDS accepts packet
	- Host will not accept packet
      - Evasion Attack:
        - IDS does not accept packet
	- Host will accept packet
      - Technical Attacks:
        - Packet sequence manipulation
	- Fragmenting payload
	- Overlapping fragments with different reassembly by devices
	- Manipulating TCP headers
	- Manipulation IP options
	- Sending data during the TCP connection setup
      - Non-Technical Attacks:
        - Attacking during periods of low manning
	- Attacking during a surge in activity
